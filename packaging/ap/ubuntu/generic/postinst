#!/bin/bash
. /usr/share/debconf/confmodule

set -euo pipefail

SUCCESS=false
DROPDBONERROR=false
DROPCONFIGONERROR=false
HARMONY_HOME=/opt/harmony-ap

log() { echo "harmony-ap: $*" >&2; }
warn() { log "WARNING: $*"; }
error() { log "ERROR: $*"; }

# shellcheck disable=SC2317
cleanup() {
  if [ ! "$SUCCESS" = true ]; then
    error "Installation failed"
    if [ "$DROPCONFIGONERROR" = true ]; then
      rm -f /etc/harmony-ap/*.p12
      rm -f /etc/harmony-ap/domibus.properties
    fi
    if [ "$DROPDBONERROR" = true ]; then
      mysql -e "DROP SCHEMA $DB_SCHEMA; DROP USER '$DB_USER'@localhost" >&2
    fi;
  fi
}

set_prop_raw() {
  local prop="$1"
  local value="${2:-}"
  crudini --set /etc/harmony-ap/domibus.properties "" "$prop" "$value"
}

set_prop() {
  local prop="$1"
  local value="${2:-}"
  # escape \ -> \\ (required by java property file syntax)
  value="${value//\\/\\\\}"
  # escape Spring ${property} placeholders: $ -> ${:$}
  value="${value//\$\{/\$\{:\$\}\{}"
  set_prop_raw "$prop" "$value"
}

get_prop() {
  local prop="$1"
  local default="${2:-}"
  local value
  value=$(crudini --get /etc/harmony-ap/domibus.properties "" "$prop" 2>/dev/null)
  # Unescape: \\ -> \, ${:$} -> $
  value="${value//\\\\/\\}"
  value="${value//\$\{:\$\}\{/\$\{}"
  echo "${value:-$default}"
}

get_tomcat_prop() {
  local default="${2:-}"
  local value
  value=$(xmlstarlet sel -t -v "//Connector[@SSLEnabled=\"true\"]/@$1" "/etc/harmony-ap/tomcat-conf/server.xml" 2>/dev/null)
  echo "${value:-$default}";
}

delete_prop() {
  local prop="$1";
  sed --in-place --regexp-extended "/^\s*${prop}\s*=.*/d" /etc/harmony-ap/domibus.properties
}

rename_prop() {
  local old="$1";
  local new="$2";
  sed --in-place --regexp-extended "s/^\s*${old}\s*=\s*(.*)$/${new}=\1/" /etc/harmony-ap/domibus.properties
}

case "$1" in
 configure)
  trap cleanup EXIT

  if [[ -n $2 && -f /etc/harmony-ap/domibus.properties ]] && dpkg --compare-versions "$2" lt "2.0.0"; then
    # Migrate old properties on upgrade
    set_prop 'domibus.entityManagerFactory.jpaProperty.hibernate.dialect' 'org.hibernate.dialect.MySQL8Dialect'

    if [[ "$(get_prop 'domibus.database.serverName' 'localhost')" == "localhost" ]]; then
      set_prop_raw 'domibus.datasource.url' 'jdbc:mysql://${domibus.database.serverName}:${domibus.database.port}/${domibus.database.schema}?sslMode=disabled&allowPublicKeyRetrieval=true&useLegacyDatetimeCode=false&serverTimezone=UTC'
    else
      jdbcUrl="$(get_prop 'domibus.datasource.url')"
      set_prop_raw 'domibus.datasource.url' "$jdbcUrl&useLegacyDatetimeCode=false&serverTimezone=UTC"
      warn "Please verify that '$(get_prop 'domibus.datasource.url')' is correct"
    fi

    set_prop 'domibus.entityManagerFactory.jpaProperty.hibernate.connection.driver_class' 'com.mysql.cj.jdbc.Driver'

    rename_prop 'domibus\.datasource\.minPoolSize' 'domibus.datasource.minimumIdle'

    if [[ "$(get_prop 'domibus.datasource.maxLifetime')" == "30" ]]; then
      set_prop 'domibus.datasource.maxLifetime' '1800'
    fi

    delete_prop 'domibus\.datasource\.xa.*'
    delete_prop 'domibus\.jms\.queue\.ui\.replication'
    delete_prop 'domibus\.ui\.replication.\enabled.*'
    delete_prop 'domibus\.entityManagerFactory\.jpaProperty\.hibernate\.transaction\.factory_class'
    delete_prop 'domibus\.entityManagerFactory\.jpaProperty\.hibernate\.transaction\.jta\.platform'
    delete_prop 'com\.atomikos\..*'

    if [[ "$(get_prop 'domibus.dynamicdiscovery.client.specification')" == "PEPPOL" ]]; then
      rename_prop 'domibus\.dynamicdiscovery\.partyid\.type' 'domibus.dynamicdiscovery.peppolclient.partyid.type'
      rename_prop 'domibus\.dynamicdiscovery\.partyid\.responder\.role' 'domibus.dynamicdiscovery.peppolclient.partyid.responder.role'
    else
      rename_prop 'domibus\.dynamicdiscovery\.partyid\.type' 'domibus.dynamicdiscovery.oasisclient.partyid.responder.role'
      rename_prop 'domibus\.dynamicdiscovery\.partyid\.responder\.role' 'domibus.dynamicdiscovery.oasisclient.partyid.responder.role'
    fi

    set_prop 'domibus.passwordPolicy.defaultUser.create' 'false'
    set_prop 'domibus.payload.decompression.validation.active' 'true'

    # fix startup.sh ("source" does not work with sh)
    sed -i "/source \/opt\/harmony-ap\/bin\/setjavahome.sh/d" /opt/harmony-ap/bin/startup.sh
  fi


  db_get harmony-ap/adminuser
  ADMIN_USER="$RET"
  db_get harmony-ap/adminpassword
  ADMIN_PASSWORD="$RET"
  db_get harmony-ap/partyname
  PARTY_NAME="$RET"
  db_get harmony-ap/serverdn
  SERVER_DN="$RET"
  db_get harmony-ap/serversan
  SERVER_SAN="$RET"
  db_get harmony-ap/securitydn
  SECURITY_DN="${RET:-$SERVER_DN}"
  db_get harmony-ap/tomcatport
  TOMCAT_PORT="${RET:-8443}"

  db_get harmony-ap/smlzone
  SML_ZONE="${RET}"

  db_get harmony-ap/usedynamicdiscovery
  USE_DYNAMIC_DISCOVERY="${RET:-$(get_prop domibus.dynamicdiscovery.useDynamicDiscovery false)}"

  if [ ! "$USE_DYNAMIC_DISCOVERY" = true ]; then
    USE_DYNAMIC_DISCOVERY=false
  else
    SML_ZONE="${SML_ZONE:-$(get_prop 'domibus.smlzone')}"
  fi

  db_get harmony-ap/database-schema
  DB_SCHEMA="${RET:-$(get_prop 'domibus.database.schema' 'harmony_ap')}"
  db_get harmony-ap/database-host
  DB_HOST="${RET:-$(get_prop 'domibus.database.serverName' 'localhost')}"
  db_get harmony-ap/database-port
  DB_PORT="${RET:-$(get_prop 'domibus.database.port' '3306')}"
  db_get harmony-ap/database-user
  DB_USER="${RET:-$(get_prop 'domibus.datasource.user')}"
  db_get harmony-ap/database-password
  DB_PASSWORD="${RET:-$(get_prop 'domibus.datasource.password')}"
  db_stop

  if [[ "$DB_HOST" = "localhost" ]]; then

    if [[ ! -f /etc/harmony-ap/.mysql_tzinfo ]]; then
      mysql_tzinfo_to_sql /usr/share/zoneinfo/posix | mysql -u root mysql >&2
      systemctl restart mysql
      mysqladmin -w -s -u root ping &>/dev/null
      touch /etc/harmony-ap/.mysql_tzinfo
    fi

    SCHEMA_EXISTS=$(mysql -w -s -N -e "show schemas like '$DB_SCHEMA'");
    if [ -z "$SCHEMA_EXISTS" ]; then
      DROPDBONERROR=true
      log "Creating database schema $DB_SCHEMA" >&2

      DB_USER=${DB_USER:-harmony_ap}
      DB_PASSWORD=${DB_PASSWORD:-$(openssl rand -base64 12)}

      echo "\
CREATE SCHEMA $DB_SCHEMA;
ALTER SCHEMA $DB_SCHEMA charset=utf8mb4 collate=utf8mb4_bin;
CREATE USER IF NOT EXISTS '$DB_USER'@localhost;
ALTER USER '$DB_USER'@localhost IDENTIFIED BY '$DB_PASSWORD';
GRANT ALL ON $DB_SCHEMA.* TO '$DB_USER'@localhost;" | mysql >&2
    fi
    # required (at least) for upgrade from 1.4
    mysql -s -e "GRANT SYSTEM_VARIABLES_ADMIN ON *.* TO '$DB_USER'@'localhost';" >&2
  fi

  if [[ -z $DB_USER || -z $DB_PASSWORD ]]; then
    error 'Database credentials not found'
    exit 1
  fi

  if [[ "$DB_HOST" != "localhost" ]]; then
    log "Waiting for database $DB_HOST:$DB_PORT to become available...."
    count=0
    wait_count=60;
    while ((count++ < wait_count)) && ! mysqladmin status -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASSWORD" &> /tmp/mysql-status; do
      sleep 1;
    done

    if ((count>=wait_count)); then
      warn "Unable to determine database status:"
      sed 's/^/    /' /tmp/mysql-status >&2
    fi
  fi

  log "Applying database migrations..."
  export LIQUIBASE_HOME=/opt/harmony-ap/liquibase
  export LIQUIBASE_SHOW_BANNER=false
  URL="jdbc:mysql://$DB_HOST:$DB_PORT/$DB_SCHEMA"
  HASHEDPASSWORD=$(java -cp "/opt/harmony-ap/webapps/ROOT/WEB-INF/lib/*" eu.domibus.api.util.BCryptPasswordHash "$ADMIN_PASSWORD")

  # using defaultsFile to avoid revealing passwords in the process listing
  /bin/bash $LIQUIBASE_HOME/liquibase.sh --defaultsFile=<(echo "\
classpath:/opt/harmony-ap/lib/mysql-connector-j-8.0.33.jar
driver:com.mysql.cj.jdbc.Driver
url:$URL
username:$DB_USER
password:${DB_PASSWORD//\\/\\\\}
changeLogFile:/opt/harmony-ap/db/db.changelog.xml") \
  update -DadminUser="$ADMIN_USER" -DadminPassword="$HASHEDPASSWORD" 2>&1 | sed 's/^/    /' >&2

  if [[ "$DB_HOST" = "localhost" ]]; then
    mysql -s -e "REVOKE SYSTEM_VARIABLES_ADMIN ON *.* FROM '$DB_USER'@'localhost';" >&2
  fi

  if [ ! -f /etc/harmony-ap/domibus.properties ]; then
    log "Creating configuration..."
    DROPCONFIGONERROR=true

    PARTY_NAME="${PARTY_NAME:-selfsigned}"
    SERVER_FQDN="${SERVER_FQDN:-$(hostname -f)}"
    SERVER_DN="${SERVER_DN:-CN=$SERVER_FQDN}"
    SERVER_SAN="${SERVER_SAN:-DNS:$SERVER_FQDN}"
    SECURITY_DN="${SECURITY_DN:-CN=$PARTY_NAME}"

    SECURITY_KEYSTORE_PASSWORD="$(get_prop 'domibus.security.keystore.password' "$(openssl rand -base64 12)")"
    SECURITY_TRUSTSTORE_PASSWORD="$(get_prop 'domibus.security.truststore.password' "$(openssl rand -base64 12)")"

    TLS_KEYSTORE_PASSWORD="$(get_tomcat_prop 'keystorePass' "$(openssl rand -base64 12)")"
    TLS_KEYSTORE_ALIAS="$(get_tomcat_prop 'keyAlias' "$PARTY_NAME")"
    TLS_TRUSTSTORE_PASSWORD="$(get_tomcat_prop 'trustStorePass' "$(openssl rand -base64 12)")"

    mkdir /etc/harmony-ap/certs
    if [[ ! -f /etc/harmony-ap/ap-keystore.p12 ]]; then
      keytool -storetype pkcs12 -genkeypair -keyalg RSA -alias "$PARTY_NAME" \
        -keystore /etc/harmony-ap/ap-keystore.p12 -storepass "$SECURITY_KEYSTORE_PASSWORD" \
        -keypass "$SECURITY_KEYSTORE_PASSWORD" -validity 333 -keysize 3072 \
        -dname "$SECURITY_DN" 2>/dev/null

      keytool -export -alias "$PARTY_NAME" -keystore /etc/harmony-ap/ap-keystore.p12 -storepass "$SECURITY_KEYSTORE_PASSWORD" \
        -file "/etc/harmony-ap/certs/security-${PARTY_NAME}.cer" &>/dev/null
    fi

    if [[ ! -f /etc/harmony-ap/ap-truststore.p12 ]]; then
      keytool -storetype pkcs12 -genkeypair -alias mock -keystore /etc/harmony-ap/ap-truststore.p12 \
        -storepass "$SECURITY_TRUSTSTORE_PASSWORD" \
        -keypass "$SECURITY_TRUSTSTORE_PASSWORD" -dname "CN=mock" 2>/dev/null
      keytool -delete -alias mock -keystore /etc/harmony-ap/ap-truststore.p12 -storepass "$SECURITY_TRUSTSTORE_PASSWORD" 2>/dev/null
    fi

    if [[ ! -f /etc/harmony-ap/tls-keystore.p12 ]]; then
      keytool -storetype pkcs12 -genkeypair -keyalg RSA -alias "$PARTY_NAME" \
        -keystore "/etc/harmony-ap/tls-keystore.p12" -storepass "$TLS_KEYSTORE_PASSWORD" \
        -validity 333 -keysize 3072 -dname "$SERVER_DN" \
        -ext "SAN=$SERVER_SAN" 2>/dev/null

      keytool -export -alias "$PARTY_NAME" \
        -keystore "/etc/harmony-ap/tls-keystore.p12" -storepass "$TLS_KEYSTORE_PASSWORD" \
        -file "/etc/harmony-ap/certs/tls-${PARTY_NAME}.cer" &>/dev/null
    fi

    if [[ ! -f /etc/harmony-ap/tls-truststore.p12 ]]; then
      keytool -export -alias "$PARTY_NAME" \
        -keystore "/etc/harmony-ap/tls-keystore.p12" \
        -storepass "$TLS_KEYSTORE_PASSWORD" 2>/dev/null \
      | keytool -import -noprompt -alias "$PARTY_NAME" \
        -keystore /etc/harmony-ap/tls-truststore.p12 \
        -storetype pkcs12 \
        -storepass "$TLS_TRUSTSTORE_PASSWORD" 2>/dev/null
    fi

    cp -n ${HARMONY_HOME}/setup/domibus.properties.template /etc/harmony-ap/domibus.properties
    chmod 640 /etc/harmony-ap/domibus.properties

    cp -n ${HARMONY_HOME}/setup/server.xml.template /etc/harmony-ap/tomcat-conf/server.xml
    chmod 640 /etc/harmony-ap/tomcat-conf/server.xml

    cp -n ${HARMONY_HOME}/setup/clientauthentication.xml.template /etc/harmony-ap/clientauthentication.xml
    chmod 640 /etc/harmony-ap/clientauthentication.xml

    env -i \
      tls_truststore_password="$TLS_TRUSTSTORE_PASSWORD" \
      envsubst '$tls_truststore_password' </opt/harmony-ap/setup/setenv.sh.template >/opt/harmony-ap/bin/setenv.sh
    chmod +x /opt/harmony-ap/bin/setenv.sh

    xmlstarlet edit --pf --inplace \
      --update '//Connector[@SSLEnabled="true"]/@port' --value "$TOMCAT_PORT" \
      --update '//Connector[@SSLEnabled="true"]/@keystorePass' --value "$TLS_KEYSTORE_PASSWORD" \
      --update '//Connector[@SSLEnabled="true"]/@keyAlias' --value "$TLS_KEYSTORE_ALIAS" \
      --update '//Connector[@SSLEnabled="true"]/@truststorePass' --value "$TLS_TRUSTSTORE_PASSWORD" \
      /etc/harmony-ap/tomcat-conf/server.xml

    xmlstarlet edit --pf --inplace \
      -N s='http://cxf.apache.org/configuration/security' \
      --update '//s:trustManagers/s:keyStore/@password' --value "$TLS_TRUSTSTORE_PASSWORD" \
      --update '//s:keyManagers/s:keyStore/@password' --value "$TLS_KEYSTORE_PASSWORD" \
      /etc/harmony-ap/clientauthentication.xml

    set_prop domibus.security.keystore.password     "$SECURITY_KEYSTORE_PASSWORD"
    set_prop domibus.security.key.private.alias     "$PARTY_NAME"
    set_prop domibus.security.key.private.password  "$SECURITY_KEYSTORE_PASSWORD"
    set_prop domibus.security.truststore.password   "$SECURITY_TRUSTSTORE_PASSWORD"

    if [[ "$DB_HOST" == "localhost" ]]; then
      # disable encryption when using a local database
      set_prop_raw 'domibus.datasource.url' \
        'jdbc:mysql://${domibus.database.serverName}:${domibus.database.port}/${domibus.database.schema}?sslMode=disabled&useLegacyDatetimeCode=false&serverTimezone=UTC'
    fi
  fi
  # always set updateable properties
  [[ -n $DB_HOST     ]] && set_prop 'domibus.database.serverName' "$DB_HOST"
  [[ -n $DB_PORT     ]] && set_prop 'domibus.database.port'       "$DB_PORT"
  [[ -n $DB_SCHEMA   ]] && set_prop 'domibus.database.schema'     "$DB_SCHEMA"
  [[ -n $DB_USER     ]] && set_prop 'domibus.datasource.user'     "$DB_USER"
  [[ -n $DB_PASSWORD ]] && set_prop 'domibus.datasource.password' "$DB_PASSWORD"
  [[ -n $SML_ZONE    ]] && set_prop 'domibus.smlzone'             "$SML_ZONE"
  [[ -n $USE_DYNAMIC_DISCOVERY ]] && set_prop 'domibus.dynamicdiscovery.useDynamicDiscovery' "$USE_DYNAMIC_DISCOVERY"

  DROPCONFIGONERROR=false
  DROPDBONERROR=false

  # Check if the setenv.sh script loads the setjavahome.sh script and update if needed
  if [ -f /opt/harmony-ap/bin/setjavahome.sh ] && ! grep -Fq "/opt/harmony-ap/bin/setjavahome.sh" /opt/harmony-ap/bin/setenv.sh; then
    sed -i '1a . /opt/harmony-ap/bin/setjavahome.sh' /opt/harmony-ap/bin/setenv.sh
  fi

  if [ -d /opt/harmony-ap/work ]; then
    # move work directory to a new location
    mkdir -p /var/opt/harmony-ap
    sed -i \
      's|-Ddomibus.work.location=/opt/harmony-ap/work|-Ddomibus.work.location=/var/opt/harmony-ap/work|' \
      /opt/harmony-ap/bin/setenv.sh
    if ! grep -Fq 'workDir="/var/opt/harmony-ap/tomcat"' /etc/harmony-ap/tomcat-conf/server.xml; then
      sed -i -E 's|(<Host name="localhost")|\1 workDir="/var/opt/harmony-ap/tomcat"|' /etc/harmony-ap/tomcat-conf/server.xml
    fi
    mv /opt/harmony-ap/work /var/opt/harmony-ap/
  fi

  if [[ -n $2 ]] && dpkg --compare-versions "$2" lt "2.2.0"; then
    xmlstarlet edit --pf --inplace \
      --update '//Host[@appBase="webapps"]/@appBase' --value "/opt/harmony-ap/webapps" \
      /etc/harmony-ap/tomcat-conf/server.xml
  fi

  mkdir -m 0750 -p /run/harmony-ap /var/tmp/harmony-ap /var/opt/harmony-ap/work /var/opt/harmony-ap/tomcat
  chown -R harmony-ap:harmony-ap /run/harmony-ap /var/tmp/harmony-ap /var/opt/harmony-ap
  chmod -R -x,u=rwX,g=rX,o= /var/opt/harmony-ap

  # fix app folder permissions
  chown -R root:harmony-ap /opt/harmony-ap
  chmod -R -x,u=rwX,g=rX,o=X /opt/harmony-ap
  chmod  ug+x /opt/harmony-ap/bin/*.sh

  # nicer log directory permissions
  mkdir -p /var/log/harmony-ap
  chmod 1770 /var/log/harmony-ap
  chown harmony-ap:adm /var/log/harmony-ap

  # config folder needs to be writable by harmony-ap
  chown -R harmony-ap:harmony-ap /etc/harmony-ap
  chmod -R -x,u=rwX,g=rX,o=X /etc/harmony-ap
  chown -R root:harmony-ap \
    /etc/harmony-ap/tomcat-conf \
    /etc/harmony-ap/plugins/lib

  # reload service configuration
  systemctl daemon-reload

  if [ "$(systemctl is-enabled harmony-ap)" = "enabled" ]; then
    systemctl start harmony-ap 2>/dev/null || true
  fi

  log "Success."
  SUCCESS=true
 ;;

 abort-upgrade|abort-remove|abort-deconfigure)
 ;;

 *)
  echo "postinst called with unknown argument '$1'" >&2
  exit 1
 ;;
esac

exit 0
