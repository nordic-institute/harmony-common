<?xml version="1.0" encoding="UTF-8"?>

<spring:beans
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:spring="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns="http://activemq.apache.org/schema/core"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder system-properties-mode="ENVIRONMENT" ignore-resource-not-found="false" ignore-unresolvable="false"/>

    <broker useJmx="true" brokerName="${activeMQ.brokerName}" persistent="${activeMQ.persistent}" schedulerSupport="true" dataDirectory="${domibus.work.location:${domibus.config.location}}/work/activemq_data" tmpDataDirectory="${domibus.work.location:${domibus.config.location}}/temp" useShutdownHook="false" >
        <managementContext>
            <managementContext createConnector="true" connectorPort="${activeMQ.connectorPort}"/>
        </managementContext>
        <transportConnectors>
            <transportConnector uri="${activeMQ.transportConnector.uri}" disableAsyncDispatch="true"/>
        </transportConnectors>
        <persistenceAdapter>
            <kahaDB directory="${domibus.work.location:${domibus.config.location}}/work/kahadb" />
        </persistenceAdapter>
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="64 mb" />
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="512 mb" />
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="128 mb" />
                </tempUsage>
            </systemUsage>
        </systemUsage>
        <destinations>
            <queue id="eArchiveQueue"
                   physicalName="domibus.internal.earchive.queue"/>
            <queue id="eArchiveNotificationQueue"
                   physicalName="domibus.internal.earchive.notification.queue"/>
            <queue id="eArchiveNotificationDLQ"
                   physicalName="domibus.internal.earchive.notification.dlq"/>
            <queue id="sendMessageQueue"
                   physicalName="domibus.internal.dispatch.queue"/>
            <queue id="sendLargeMessageQueue"
                   physicalName="domibus.internal.largeMessage.queue"/>
            <queue id="splitAndJoinQueue"
                   physicalName="domibus.internal.splitAndJoin.queue"/>
            <queue id="pullMessageQueue"
                   physicalName="domibus.internal.pull.queue"/>
            <queue id="retentionMessageQueue"
                   physicalName="domibus.internal.retentionMessage.queue"/>
            <queue id="sendPullReceiptQueue"
                   physicalName="domibus.internal.pull.receipt.queue"/>
            <queue id="alertMessageQueue"
                   physicalName="domibus.internal.alert.queue"/>

            <!--queue id="notifyBackendQueue"
                   physicalName="domibus.internal.notification.queue"/-->
            <!-- If no backend with matching policy found notifcations are sent to this queue -->
            <queue id="unknownReceiverQueue"
                   physicalName="domibus.internal.notification.unknown"/>

            <queue id="uiReplicationQueue"
                   physicalName="domibus.internal.ui.replication.queue"/>

            <!-- Backend plugin notification queues -->
            <queue id="webserviceBackendNotificationQueue"
                   physicalName="domibus.notification.webservice"/>
            <queue id="jmsBackendNotificationQueue"
                   physicalName="domibus.notification.jms"/>
            <queue id="filesystemBackendNotificationQueue"
                   physicalName="domibus.notification.filesystem"/>

            <queue id="notifyAdapterKerkoviQueue"
                   physicalName="domibus.notification.kerkovi"/>

            <!-- FSPlugin queues -->
            <queue id="fsPluginSendQueue"
                   physicalName="${fsplugin.send.queue:domibus.fsplugin.send.queue}"/>

            <queue id="wsPluginSendQueue"
                   physicalName="${wsplugin.send.queue:domibus.wsplugin.send.queue}"/>

            <!-- Internal queues of JMS backend plugin -->
            <queue id="jmsPluginToBackendQueue"
                       physicalName="domibus.backend.jms.replyQueue"/>
            <queue id="businessMessageOutQueue"
                       physicalName="domibus.backend.jms.outQueue"/>
            <queue id="businessMessageInQueue"
                   physicalName="domibus.backend.jms.inQueue"/>
            <queue id="errorNotifyConsumerQueue" physicalName="domibus.backend.jms.errorNotifyConsumer" />
            <queue id="errorNotifyProducerQueue" physicalName="domibus.backend.jms.errorNotifyProducer" />
            <queue id="domibusDLQ" physicalName="domibus.DLQ" />
            <topic id="clusterCommandTopic" physicalName="domibus.internal.command"/>

        </destinations>
        <destinationPolicy>
            <policyMap>
                <policyEntries>
                    <policyEntry queue="domibus.internal.earchive.notification.queue">
                        <deadLetterStrategy>
                            <!--<individualDeadLetterStrategy queuePrefix="DLQ."/>-->
                            <sharedDeadLetterStrategy processExpired="false">
                                <deadLetterQueue>
                                    <queue physicalName="domibus.internal.earchive.notification.dlq"/>
                                </deadLetterQueue>
                            </sharedDeadLetterStrategy>
                        </deadLetterStrategy>
                        <dispatchPolicy>
                            <priorityDispatchPolicy/>
                        </dispatchPolicy>
                    </policyEntry>
                    <policyEntry queue=">">
                        <deadLetterStrategy>
                            <!--<individualDeadLetterStrategy queuePrefix="DLQ."/>-->
                            <sharedDeadLetterStrategy processExpired="false">
                                <deadLetterQueue>
                                    <queue physicalName="domibus.DLQ"/>
                                </deadLetterQueue>
                            </sharedDeadLetterStrategy>
                        </deadLetterStrategy>
                        <dispatchPolicy>
                            <roundRobinDispatchPolicy/>
                        </dispatchPolicy>
                    </policyEntry>
                </policyEntries>
            </policyMap>
        </destinationPolicy>

        <plugins>
            <simpleAuthenticationPlugin anonymousAccessAllowed="false">
                <users>
                    <authenticationUser username="${activeMQ.username}" password="${activeMQ.password}" groups="users"/>
                    <authenticationUser username="admin" password="123456" groups="admins,users" />
                </users>
            </simpleAuthenticationPlugin>
            <authorizationPlugin>
                <map>
                    <authorizationMap>
                        <authorizationEntries>
                            <authorizationEntry queue="domibus.>" read="users" write="users" admin="admins" />
                            <authorizationEntry queue="*.domibus.>" read="users" write="users" admin="admins" />
                            <authorizationEntry topic="domibus.>" read="users" write="users" admin="admins"/>
                            <authorizationEntry topic="ActiveMQ.Advisory.>" read="users" write="users" admin="users"/>
                        </authorizationEntries>
                    </authorizationMap>
                </map>
            </authorizationPlugin>
            <redeliveryPlugin fallbackToDeadLetter="true"
                              sendToDlqIfMaxRetriesExceeded="true">
                <redeliveryPolicyMap>
                    <redeliveryPolicyMap>
                        <defaultEntry>
                            <!-- default policy-->
                            <redeliveryPolicy maximumRedeliveries="10" redeliveryDelay="300000"/>
                        </defaultEntry>
                        <redeliveryPolicyEntries>
                            <redeliveryPolicy queue="domibus.internal.earchive.queue" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="domibus.internal.earchive.notification.queue" maximumRedeliveries="6" redeliveryDelay="1800000"/>
                            <redeliveryPolicy queue="domibus.internal.earchive.notification.dlq" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="domibus.internal.retentionMessage.queue" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="domibus.internal.dispatch.queue" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="domibus.internal.largeMessage.queue" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="domibus.internal.splitAndJoin.queue" maximumRedeliveries="3"/>
                            <redeliveryPolicy queue="domibus.internal.pull.queue" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="domibus.internal.pull.receipt.queue" maximumRedeliveries="3"/>
                            <redeliveryPolicy queue="domibus.internal.alert.queue" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="domibus.internal.ui.replication.queue" maximumRedeliveries="1" redeliveryDelay="10000"/>
                            <redeliveryPolicy queue="${fsplugin.send.queue:domibus.fsplugin.send.queue}" maximumRedeliveries="0"/>
                            <redeliveryPolicy queue="${wsplugin.send.queue:domibus.wsplugin.send.queue}" maximumRedeliveries="0"/>
                        </redeliveryPolicyEntries>
                    </redeliveryPolicyMap>
                </redeliveryPolicyMap>
            </redeliveryPlugin>

            <discardingDLQBrokerPlugin dropAll="false" dropOnly="domibus.internal.dispatch.queue domibus.internal.pull.queue domibus.internal.alert.queue domibus.internal.earchive.queue domibus.internal.earchive.notification.dlq" reportInterval="10000"/>
        </plugins>
    </broker>

</spring:beans>
